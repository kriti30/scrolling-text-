module sevenseg (a,b,c,d,e,f,g,dp,en,in0,in1,in2,in3,clock,reset);
 
 output a, b, c, d, e, f, g, dp;  // output for 7 LED’s
 output [3:0] en;   // each of the 4 digits on 7 segment display is enabled by this active low 4 bit enable signal
 input clock, reset;
 input in0, in1, in2, in3;  //the 4 inputs for each display

// Now we are going to design an 18 bit counter because we have 4 displays and we need 2^4=16 bits for sequence and other 2 bits will act as enable bits.
 
localparam N = 18;
 
reg [N-1:0]count;  //the 18 bit counter that allows us to multiplex at 1000Hz

count <= 0;
always @ (posedge clock )
begin
count <= count + 1;
end

reg [6:0] display;
reg [3:0] temp_en;

always @ (*)
begin
case(count[N-1:N-2])    // this section tells us about which display will be enabled and what input has to be displayed on the selected segment

2'b00 : 
    begin
    display = in0;
    temp_en = 4'b0111;  //This value in temp_en will enable the first display by providing active low
    end
    
2'b01: 
     begin 
     display = in1;
     temp_en = 4'b1011;
     end
    
   2'b10: 
    begin
    display = in2;
    temp_en = 4'b1101;
    end
     
   2'b11:  
    begin
    display = in3;
    temp_en = 4'b1110;
    end
  endcase
 end   // end of begin

assign en = temp_en;

// Now we will make a register temp_display to store the binary code for the data to be displayed

Reg [6:0] temp_display;

// This section consists of the binary code of the data that we wish to display

always@(*)
begin

case (display)

4’d0 : temp_display = 7’b1111110;  // if we give input ‘0’ nothing except ‘-‘ will be displayed
4’d1 : temp_display = 7’b1001000;  // This will display ‘H’
4’d2 : temp_display = 7’b0110000;  // to display ‘E’
4’d3 : temp_display = 7’b1110001; // to display ‘L’
4’d4 : temp_display = 7’b0000001; // to display ‘O’
4’d5 : temp_display = 7’b1111010; // to display ‘r’
4’d6 : temp_display = 7’b1000010; // to display ‘d’

default : temp_display = 7’b1111111; // blank

endcase
end
 assign {a,b,c,d,e,f,g} = temp_display  // concatenation operator – bit by bit assignment of values
assign dp = 1’b1;
endmodule


